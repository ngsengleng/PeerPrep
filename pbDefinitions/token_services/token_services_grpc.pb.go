// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: token_services.proto

package token_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenServicesClient is the client API for TokenServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServicesClient interface {
	VerifyToken(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error)
}

type tokenServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServicesClient(cc grpc.ClientConnInterface) TokenServicesClient {
	return &tokenServicesClient{cc}
}

func (c *tokenServicesClient) VerifyToken(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error) {
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, "/token_services.TokenServices/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServicesServer is the server API for TokenServices service.
// All implementations must embed UnimplementedTokenServicesServer
// for forward compatibility
type TokenServicesServer interface {
	VerifyToken(context.Context, *VerifyRequest) (*VerifyReply, error)
	mustEmbedUnimplementedTokenServicesServer()
}

// UnimplementedTokenServicesServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServicesServer struct {
}

func (UnimplementedTokenServicesServer) VerifyToken(context.Context, *VerifyRequest) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedTokenServicesServer) mustEmbedUnimplementedTokenServicesServer() {}

// UnsafeTokenServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServicesServer will
// result in compilation errors.
type UnsafeTokenServicesServer interface {
	mustEmbedUnimplementedTokenServicesServer()
}

func RegisterTokenServicesServer(s grpc.ServiceRegistrar, srv TokenServicesServer) {
	s.RegisterService(&TokenServices_ServiceDesc, srv)
}

func _TokenServices_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServicesServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_services.TokenServices/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServicesServer).VerifyToken(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenServices_ServiceDesc is the grpc.ServiceDesc for TokenServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token_services.TokenServices",
	HandlerType: (*TokenServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _TokenServices_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_services.proto",
}
